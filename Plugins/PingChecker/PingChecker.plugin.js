/**
 * @name PingChecker
 * @version 1.0.0
 * @description Check your latency with /ping command
 * @author notfence
 * @authorId 1176524761686364226
 * @source https://github.com/notfence/BDplugins/tree/main/Plugins/PingChecker
 */

module.exports = class PingCommand {
    start() {
        this.command = {
            id: 'ping',
            name: 'ping',
            description: 'Check ping to the current Discord server',
            options: [],
            execute: async () => {
                const { ping, url } = await this.getPing();
                const pingText = (typeof ping === 'number') ? `${ping} ms` : String(ping);
                const embed = {
                    title: 'Ping',
                    description: `üèì Pong! ${pingText}\n${url}`,
                    timestamp: new Date().toISOString()
                };
                return { embeds: [embed] };
            },
            predicate: () => true,
        };
        BdApi.Commands.register(this.constructor.name, this.command);
    }

    stop() {
        BdApi.Commands.unregister(this.constructor.name, this.command.id);
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç { ping, url }:
     * - ping: —á–∏—Å–ª–æ (ms) –∏–ª–∏ —Å—Ç—Ä–æ–∫–∞ '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
     * - url: —Å—Ç—Ä–æ–∫–∞ —Å –∞–¥—Ä–µ—Å–æ–º/endpoint'–æ–º, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è
     */
    async getPing() {
        const { Webpack } = BdApi;
        let ping = 'unknown';
        let url = 'unknown';

        try {
            // –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å gateway websocket
            const GatewayConnectionStore = Webpack.getModule(
                m => typeof m?.getSocket === 'function' && typeof m?.isConnected === 'function'
            );
            if (GatewayConnectionStore) {
                const socket = GatewayConnectionStore.getSocket();
                if (socket && typeof socket === 'object') {
                    const possible = ['_ping', 'ping', 'latency', 'latencyMs', 'heartbeatLatency', 'heartbeatPing'];
                    for (const key of possible) {
                        const value = socket[key];
                        if (typeof value === 'number' && value > 0) {
                            ping = Math.round(value);
                            break;
                        }
                    }

                    // –ü–æ–ø—ã—Ç–∫–∏ –ø–æ–ª—É—á–∏—Ç—å URL –∏–∑ —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª–µ–π —Å–æ–∫–µ—Ç–∞
                    url = socket.url
                        || socket._url
                        || (socket._ws && socket._ws.url)
                        || (socket.ws && socket.ws.url)
                        || (socket._socket && socket._socket.remoteAddress)
                        || socket.remoteAddress
                        || url;
                    // –ï—Å–ª–∏ URL ‚Äî –æ–±—ä–µ–∫—Ç –∏–ª–∏ –¥—Ä—É–≥–æ–π —Ç–∏–ø, –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ —Å—Ç—Ä–æ–∫–µ
                    if (typeof url !== 'string') {
                        try { url = String(url); } catch(e) { url = 'unknown'; }
                    }
                }
            }
        } catch (err) {
            console.error('Failed to read GatewayConnectionStore', err);
        }

        try {
            // –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –ø–∏–Ω–≥ –∏–∑ –º–æ–¥—É–ª–µ–π RTC (–≥–æ–ª–æ—Å–æ–≤–æ–π —Å–µ—Ä–≤–µ—Ä)
            const RTCStore = Webpack.getModule(m => typeof m?.getAveragePing === 'function' && typeof m?.getLastPing === 'function');
            if (RTCStore) {
                const avg = RTCStore.getAveragePing && RTCStore.getAveragePing();
                const last = RTCStore.getLastPing && RTCStore.getLastPing();
                if ((typeof avg === 'number' && avg > 0) || (typeof last === 'number' && last > 0)) {
                    ping = typeof avg === 'number' && avg > 0 ? Math.round(avg) : Math.round(last);
                }
                // –ï—Å–ª–∏ –µ—Å—Ç—å –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è endpoint/voice server ‚Äî –ø—Ä–æ–±—É–µ–º
                if (typeof RTCStore.getVoiceServer === 'function') {
                    try {
                        const vs = RTCStore.getVoiceServer();
                        if (vs) url = vs.endpoint || vs.url || url;
                    } catch(e) { /* silent */ }
                }
            }
        } catch (err) {
            console.error('Failed to read RTCStore', err);
        }

        // –ï—Å–ª–∏ –≤—Å—ë –µ—â—ë –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ ‚Äî fallback: –±—ã—Å—Ç—Ä—ã–π HTTP HEAD –∫ gateway endpoint
        if (ping === 'unknown') {
            try {
                const fallbackUrl = 'https://discord.com/api/v9/gateway';
                const start = Date.now();
                // HEAD —Å no-cors ‚Äî –≤—Ä–µ–º—è –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Ç–æ—á–Ω—ã–º, –Ω–æ –¥–∞—ë—Ç –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ
                await fetch(fallbackUrl, { method: 'HEAD', mode: 'no-cors' });
                const end = Date.now();
                ping = end - start;
                url = fallbackUrl;
            } catch (err) {
                console.error('Failed to check HTTP ping', err);
                // url –æ—Å—Ç–∞–Ω–µ—Ç—Å—è —Ç–µ–º, —á—Ç–æ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞–Ω—å—à–µ, –ª–∏–±–æ '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
            }
        }

        return { ping, url };
    }
};
